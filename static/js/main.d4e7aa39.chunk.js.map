{"version":3,"sources":["world.js","index.js"],"names":["World","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cells","createGrid","state","size","Array","fill","undefined","map","cell","renderWorld","board","_this2","renderableWorld","row","rowIndex","react_default","a","createElement","className","colIndex","cellState","id","key","onClick","handleClick","bind","push","startEvoluation","event","target","split","col","setState","_this3","setInterval","nextGenerationWorld","evaluateNextGeneration","aliveCells","world","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","aliveCell","value","err","return","grid","nextGenWorld","length","cellRules","getCellRules","aliveNeighboursCount","countAliveNeighbours","React","Component","neighbours","filter","findNeighbours","reduce","neighboursCount","currentNeighbour","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4e7aa39.chunk.js","sourcesContent":["import React from \"react\";\n\nclass World extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cells = this.createGrid(10);\n    this.state = { cells: this.cells };\n  }\n\n  createGrid(size) {\n    let grid = new Array(size).fill(undefined);\n    return grid.map(cell => new Array(size).fill(0));\n  }\n\n  render() {\n    return this.renderWorld(this.state.cells);\n  }\n\n  renderWorld(board) {\n    const renderableWorld = board.map((row,rowIndex) => {\n      return <div className=\"world-row\">{row.map((cell,colIndex) => {\n          const cellState = this.state.cells[rowIndex][colIndex] == 0 ? \"dead-cell\" : \"alive-cell\";\n          return <div id={rowIndex + \"_\" + colIndex} key={rowIndex + \"_\" + colIndex} onClick={this.handleClick.bind(this)} className={cellState}>{cell}</div>\n      })}</div>;\n    });\n    renderableWorld.push(\n            <div className=\"evoluation-button\">\n                <button onClick={this.startEvoluation.bind(this)}>Start Evolution</button>\n            </div>\n        )\n    return renderableWorld;\n  }\n\n  handleClick(event){\n      const row = +event.target.id.split(\"_\")[0];\n      const col = +event.target.id.split(\"_\")[1];\n      const cells = this.state.cells;\n      cells[row][col] = 1;\n    \n      this.setState({ cells: cells });\n      event.target.className = \"alive-cell\";\n  }\n\n  startEvoluation(){\n        setInterval(()=>{\n            const nextGenerationWorld = this.evaluateNextGeneration(this.state.cells);\n            this.setState({cells:nextGenerationWorld});\n        }, 1000)\n  }\n\n  createWorld(aliveCells, size) {\n    let world = this.createGrid(size);\n    console.log(aliveCells);\n    for (let aliveCell of aliveCells) {\n      world[aliveCell.row][aliveCell.col] = 1;\n    }\n    return world;\n  }\n\n  evaluateNextGeneration(grid) {\n    let nextGenWorld = this.createGrid(grid.length);\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid.length; col++) {\n        let cell = grid[row][col];\n        let cellRules = getCellRules(cell);\n        let aliveNeighboursCount = countAliveNeighbours(row, col, grid);\n        nextGenWorld[row][col] = cellRules[aliveNeighboursCount];\n      }\n    }\n    return nextGenWorld;\n  }\n}\n\nexport default World;\n\nconst findNeighbours = function(row, col, grid) {\n  let neighbours = new Array();\n  neighbours.push({ row, col: col + 1 });\n  neighbours.push({ row: row + 1, col: col + 1 });\n  neighbours.push({ row: row + 1, col });\n  neighbours.push({ row: row + 1, col: col - 1 });\n  neighbours.push({ row, col: col - 1 });\n  neighbours.push({ row: row - 1, col: col - 1 });\n  neighbours.push({ row: row - 1, col });\n  neighbours.push({ row: row - 1, col: col + 1 });\n\n  return neighbours.filter(cell => {\n    return grid[cell.row] != undefined && grid[cell.row][cell.col] != undefined;\n  });\n};\n\nconst countAliveNeighbours = function(row, col, grid) {\n  let neighbours = findNeighbours(row, col, grid);\n  return neighbours.reduce((neighboursCount, currentNeighbour) => {\n    return neighboursCount + grid[currentNeighbour.row][currentNeighbour.col];\n  }, 0);\n};\n\nconst getCellRules = function(cell) {\n  const aliveCellRules = [0, 0, 1, 1, 0, 0, 0, 0, 0];\n  const deadCellRules = [0, 0, 0, 1, 0, 0, 0, 0, 0];\n  const allCellRules = [deadCellRules, aliveCellRules];\n  return allCellRules[cell];\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport World from \"./world\";\nimport \"./style.css\";\n\nReactDOM.render(<World/> , document.getElementById(\"root\"));"],"sourceRoot":""}